// Flex grid re-import with prefix
.flex-row {
  @include flex-grid-row;

  // Nesting behavior
  & & {
    @include flex-grid-row(nest, $base: false);
  }

  // Expanded row
  &.expanded {
    max-width: none;
  }

  &.collapse {
    > .column { @include grid-col-collapse; }
  }
}

// Column
.flex-column {
  @include flex-grid-column;
}

// Column row
// The double .row class is needed to bump up the specificity
.flex-column.flex-row.flex-row {
  float: none;
  display: block;

  // To properly nest a column row, padding and margin is removed
  .flex-row & {
    padding-left: 0;
    padding-right: 0;
    margin-left: 0;
    margin-right: 0;
  }
}

@include -zf-each-breakpoint {
  @for $i from 1 through $grid-column-count {
    // Sizing (percentage)
    .#{$-zf-size}-#{$i} {
      flex: flex-grid-column($i);
      max-width: grid-column($i);
    }

    // Offsets
    $o: $i - 1;

    .#{$-zf-size}-offset-#{$o} {
      @include grid-column-offset($o);
    }
  }

  // Source ordering
  @for $i from 1 through 6 {
    .#{$-zf-size}-order-#{$i} {
      @include flex-order($i);
    }
  }

  // Block grid
  @for $i from 1 through $block-grid-max {
    .#{$-zf-size}-up-#{$i} {
      @include flex-grid-layout($i);
    }
  }

  @if $-zf-size != $-zf-zero-breakpoint {
    // Sizing (expand)
    @include breakpoint($-zf-size) {
      .#{$-zf-size}-expand {
        flex: flex-grid-column();
      }
    }

    // Auto-stacking/unstacking
    @at-root (without: media) {
      .flex-row.#{$-zf-size}-unstack {
        > .flex-column {
          flex: flex-grid-column(100%);

          @include breakpoint($-zf-size) {
            flex: flex-grid-column();
          }
        }
      }
    }
  }

  // Responsive collapsing
  .#{$-zf-size}-collapse {
    > .column { @include grid-col-collapse; }
  }

  .#{$-zf-size}-uncollapse {
    $gutter: -zf-get-bp-val($grid-column-gutter, $-zf-size);

    > .column { @include grid-col-uncollapse($gutter); }
  }
}

// Sizing (shrink)
.flex-shrink {
  flex: flex-grid-column(shrink);
  max-width: 100%;
}

// Vertical alignment using align-items and align-self
// Remove these in 6.3
@each $vdir, $prop in $-zf-flex-align {
  .flex-column.align-#{$vdir} {
    @include flex-align-self($vdir);
  }
}

.flex-columns {
  // scss-lint:disable PlaceholderInExtend
  @extend .flex-column;
}

// Event item
.jumbotron {
  @include callout;

  &.large {
    @include callout-size(3rem);
  }
}

.event-item {
  flex-wrap: wrap;
}

// Flex wrapper for sticky bottom footer
.flex-wrapper {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.flex-content {
  flex: 1 0 auto;
}

.flex-footer {
  flex: none;
}